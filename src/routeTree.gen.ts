/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as PostsImport } from './routes/posts'
import { Route as LoginImport } from './routes/login'
import { Route as GroupsImport } from './routes/groups'
import { Route as CreatePostImport } from './routes/createPost'
import { Route as CreateGroupImport } from './routes/createGroup'
import { Route as CreateCommentImport } from './routes/createComment'
import { Route as AccountImport } from './routes/account'
import { Route as IndexImport } from './routes/index'
import { Route as PostPostIdIndexImport } from './routes/post/$postId/index'
import { Route as GroupGroupIdIndexImport } from './routes/group/$groupId/index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const GroupsRoute = GroupsImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => rootRoute,
} as any)

const CreatePostRoute = CreatePostImport.update({
  id: '/createPost',
  path: '/createPost',
  getParentRoute: () => rootRoute,
} as any)

const CreateGroupRoute = CreateGroupImport.update({
  id: '/createGroup',
  path: '/createGroup',
  getParentRoute: () => rootRoute,
} as any)

const CreateCommentRoute = CreateCommentImport.update({
  id: '/createComment',
  path: '/createComment',
  getParentRoute: () => rootRoute,
} as any)

const AccountRoute = AccountImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostPostIdIndexRoute = PostPostIdIndexImport.update({
  id: '/post/$postId/',
  path: '/post/$postId/',
  getParentRoute: () => rootRoute,
} as any)

const GroupGroupIdIndexRoute = GroupGroupIdIndexImport.update({
  id: '/group/$groupId/',
  path: '/group/$groupId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountImport
      parentRoute: typeof rootRoute
    }
    '/createComment': {
      id: '/createComment'
      path: '/createComment'
      fullPath: '/createComment'
      preLoaderRoute: typeof CreateCommentImport
      parentRoute: typeof rootRoute
    }
    '/createGroup': {
      id: '/createGroup'
      path: '/createGroup'
      fullPath: '/createGroup'
      preLoaderRoute: typeof CreateGroupImport
      parentRoute: typeof rootRoute
    }
    '/createPost': {
      id: '/createPost'
      path: '/createPost'
      fullPath: '/createPost'
      preLoaderRoute: typeof CreatePostImport
      parentRoute: typeof rootRoute
    }
    '/groups': {
      id: '/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/group/$groupId/': {
      id: '/group/$groupId/'
      path: '/group/$groupId'
      fullPath: '/group/$groupId'
      preLoaderRoute: typeof GroupGroupIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/post/$postId/': {
      id: '/post/$postId/'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/createComment': typeof CreateCommentRoute
  '/createGroup': typeof CreateGroupRoute
  '/createPost': typeof CreatePostRoute
  '/groups': typeof GroupsRoute
  '/login': typeof LoginRoute
  '/posts': typeof PostsRoute
  '/register': typeof RegisterRoute
  '/group/$groupId': typeof GroupGroupIdIndexRoute
  '/post/$postId': typeof PostPostIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/createComment': typeof CreateCommentRoute
  '/createGroup': typeof CreateGroupRoute
  '/createPost': typeof CreatePostRoute
  '/groups': typeof GroupsRoute
  '/login': typeof LoginRoute
  '/posts': typeof PostsRoute
  '/register': typeof RegisterRoute
  '/group/$groupId': typeof GroupGroupIdIndexRoute
  '/post/$postId': typeof PostPostIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/createComment': typeof CreateCommentRoute
  '/createGroup': typeof CreateGroupRoute
  '/createPost': typeof CreatePostRoute
  '/groups': typeof GroupsRoute
  '/login': typeof LoginRoute
  '/posts': typeof PostsRoute
  '/register': typeof RegisterRoute
  '/group/$groupId/': typeof GroupGroupIdIndexRoute
  '/post/$postId/': typeof PostPostIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/createComment'
    | '/createGroup'
    | '/createPost'
    | '/groups'
    | '/login'
    | '/posts'
    | '/register'
    | '/group/$groupId'
    | '/post/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/createComment'
    | '/createGroup'
    | '/createPost'
    | '/groups'
    | '/login'
    | '/posts'
    | '/register'
    | '/group/$groupId'
    | '/post/$postId'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/createComment'
    | '/createGroup'
    | '/createPost'
    | '/groups'
    | '/login'
    | '/posts'
    | '/register'
    | '/group/$groupId/'
    | '/post/$postId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  CreateCommentRoute: typeof CreateCommentRoute
  CreateGroupRoute: typeof CreateGroupRoute
  CreatePostRoute: typeof CreatePostRoute
  GroupsRoute: typeof GroupsRoute
  LoginRoute: typeof LoginRoute
  PostsRoute: typeof PostsRoute
  RegisterRoute: typeof RegisterRoute
  GroupGroupIdIndexRoute: typeof GroupGroupIdIndexRoute
  PostPostIdIndexRoute: typeof PostPostIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  CreateCommentRoute: CreateCommentRoute,
  CreateGroupRoute: CreateGroupRoute,
  CreatePostRoute: CreatePostRoute,
  GroupsRoute: GroupsRoute,
  LoginRoute: LoginRoute,
  PostsRoute: PostsRoute,
  RegisterRoute: RegisterRoute,
  GroupGroupIdIndexRoute: GroupGroupIdIndexRoute,
  PostPostIdIndexRoute: PostPostIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/account",
        "/createComment",
        "/createGroup",
        "/createPost",
        "/groups",
        "/login",
        "/posts",
        "/register",
        "/group/$groupId/",
        "/post/$postId/"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/account": {
      "filePath": "account.jsx"
    },
    "/createComment": {
      "filePath": "createComment.jsx"
    },
    "/createGroup": {
      "filePath": "createGroup.jsx"
    },
    "/createPost": {
      "filePath": "createPost.jsx"
    },
    "/groups": {
      "filePath": "groups.jsx"
    },
    "/login": {
      "filePath": "login.jsx"
    },
    "/posts": {
      "filePath": "posts.jsx"
    },
    "/register": {
      "filePath": "register.jsx"
    },
    "/group/$groupId/": {
      "filePath": "group/$groupId/index.jsx"
    },
    "/post/$postId/": {
      "filePath": "post/$postId/index.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
